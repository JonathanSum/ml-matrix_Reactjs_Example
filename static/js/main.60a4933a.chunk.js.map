{"version":3,"sources":["logo.svg","component/canvas.js","draw/draw.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","draw","rest","canvasRef","useRef","useEffect","w","Math","min","window","innerWidth","h","innerHeight","console","log","canvas","current","context","getContext","width","height","ref","V","U","A","ctx","n","cos","PI","sin","beginPath","color_matrix","Matrix","ones","i","j","data","floor","fillStyle","fillRect","moveTo","font","fillText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAAe,I,qCCwDAA,EA9BA,SAAAC,GAEX,IAAQC,EAAkBD,EAAlBC,KAASC,EAAjB,YAA0BF,EAA1B,GACMG,EAAYC,iBAAO,MAwBzB,OAtBAC,qBAAU,WACN,IAAMC,EAAIC,KAAKC,IAAIC,OAAOC,WAAY,KAChCC,EAAIJ,KAAKC,IAAIC,OAAOG,YAAa,KACvCC,QAAQC,IAAIR,GACZO,QAAQC,IAAIH,GAEZ,IAAMI,EAASZ,EAAUa,QACnBC,EAAUF,EAAOG,WAAW,MAClCH,EAAOI,MAAQb,EACfS,EAAOK,OAAST,EAOZV,EAAKgB,KAIV,CAAChB,IAEG,oCAAQoB,IAAKlB,GAAeD,K,eCjDnCoB,EAAI,GACJC,EAAI,GAMJC,EAAI,GA8ROvB,MAhRF,SAACwB,GAEAA,EAAIN,MACJM,EAAIL,OAId,IALA,IAKSM,EAAI,EAAGA,EAtBZ,GAsBmBA,IACnBJ,EAAEI,GAAK,GACPJ,EAAEI,GAAG,GArBA,GAqBYnB,KAAKoB,IAAQ,EAAJD,EAAQnB,KAAKqB,GAxBvC,IAyBAN,EAAEI,GAAG,GAtBA,GAsBYnB,KAAKsB,IAAQ,EAAJH,EAAQnB,KAAKqB,GAzBvC,IA0BAL,EAAEG,GAAF,YAAWJ,EAAEI,IAEjBF,EAAE,GAAK,CAAC,EAAG,GACXA,EAAE,GAAK,CAAC,EAAG,GAKXC,EAAIK,YACJ,IAAMC,EAAeC,IAAOC,KAAK,EAAG,GAIpCpB,QAAQC,IAAI,YACZ,IAAK,IAAIoB,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAGnBJ,EAAaK,KAAKF,GAAGC,GAAK5B,KAAK8B,MAAM,IAAM,KAAOH,GAClDT,EAAIa,UAAY,OAAS/B,KAAK8B,MAAM,IAAM,KAAOH,GAAK,KAClD3B,KAAK8B,MAAM,IAAM,KAAOF,GAAK,OACjCV,EAAIc,SAAa,GAAJJ,EAAY,GAAJD,EAAQ,GAAI,IAOzCT,EAAIe,OAAO,IAAK,KAChBf,EAAIgB,KAAO,aAEX,IAASP,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAASC,EAAI,EAAGA,EAAI,EAAGA,IACnBV,EAAIiB,SAASX,EAAaK,KAAKF,GAAGC,GAAQ,IAAJA,EAAU,IAAS,IAAJD,EAAU,MC9C5DS,MAPf,WAIE,OAAO,cAAC,EAAD,CAAQ1C,KAAMA,KCRR2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.60a4933a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useEffect } from 'react'\r\n\r\n\r\n\r\n\r\nlet V = []\r\nlet U = []\r\nlet clicked = []\r\nlet e_values = [1, 1]\r\n// 2 bases, 2 left-singular vectors, 2 e'evectors\r\nlet locked = [false, false, false, false, false, false]\r\nlet N = 16\r\nlet A = []\r\nconst bases = [0, 12]\r\nconst norm = 50\r\nlet s_values = [[norm, 0], [0, -norm]]\r\nlet svd\r\n\r\nconst red = '#fb8072'\r\nconst green = '#b3de69'\r\nconst orange = '#fdb462'\r\nconst blue = '#80b1d3'\r\nconst blue_orange = [blue, orange]\r\n\r\n\r\n\r\nconst Canvas = props => {\r\n\r\n    const { draw, ...rest } = props\r\n    const canvasRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        const w = Math.min(window.innerWidth, 1000)\r\n        const h = Math.min(window.innerHeight, 600)\r\n        console.log(w)\r\n        console.log(h)\r\n\r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext('2d')\r\n        canvas.width = w\r\n        canvas.height = h\r\n        const cx = w / 2;\r\n        const cy = h / 2;\r\n\r\n\r\n        const render = () => {\r\n\r\n            draw(context)\r\n        }\r\n        render()\r\n\r\n    }, [draw])\r\n\r\n    return <canvas ref={canvasRef} {...rest} />\r\n}\r\n\r\nexport default Canvas","import { Matrix } from 'ml-matrix';\r\n\r\n\r\n\r\nlet V = []\r\nlet U = []\r\nlet clicked = []\r\nlet e_values = [1, 1]\r\n// 2 bases, 2 left-singular vectors, 2 e'evectors\r\nlet locked = [false, false, false, false, false, false]\r\nlet N = 16\r\nlet A = []\r\nconst bases = [0, 12]\r\nconst norm = 50\r\nlet s_values = [[norm, 0], [0, -norm]]\r\nlet svd\r\n\r\nconst red = '#fb8072'\r\nconst green = '#b3de69'\r\nconst orange = '#fdb462'\r\nconst blue = '#80b1d3'\r\nconst blue_orange = [blue, orange]\r\n\r\n\r\n\r\nconst draw = (ctx,) => {\r\n\r\n    const w = ctx.width\r\n    const h = ctx.height\r\n\r\n    const cx = w / 2;\r\n    const cy = h / 2;\r\n    for (let n = 0; n < N; n++) {\r\n        V[n] = [];\r\n        V[n][0] = norm * Math.cos(n * 2 * Math.PI / N);\r\n        V[n][1] = norm * Math.sin(n * 2 * Math.PI / N);\r\n        U[n] = [...V[n]];\r\n    }\r\n    A[0] = [1, 0]\r\n    A[1] = [0, 1]\r\n\r\n    // compute_singular_vectors()\r\n\r\n\r\n    ctx.beginPath()\r\n    const color_matrix = Matrix.ones(6, 6);\r\n\r\n\r\n    // vanilla javascript \r\n    console.log(\"Starting\")\r\n    for (var i = 0; i < 6; i++) {\r\n        for (var j = 0; j < 6; j++) {\r\n            // console.log(i + \" \" + j);\r\n            // console.log(m1.data[i][j])\r\n            color_matrix.data[i][j] = Math.floor(255 - 42.5 * i)\r\n            ctx.fillStyle = 'rgb(' + Math.floor(255 - 42.5 * i) + ', ' +\r\n                Math.floor(255 - 42.5 * j) + ', 0)';\r\n            ctx.fillRect(j * 25, i * 25, 25, 25);\r\n        }\r\n    }\r\n\r\n    // ml-matrix javascript example\r\n\r\n\r\n    ctx.moveTo(300, 300);\r\n    ctx.font = \"30px Arial\";\r\n\r\n    for (var i = 0; i < 6; i++) {\r\n        for (var j = 0; j < 6; j++) {\r\n            ctx.fillText(color_matrix.data[i][j], j * 200 + 200, i * 200 + 200);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n// // Alfredo Canziani, 18 Aug 2021\r\n\r\n\r\n// function setup() {\r\n\r\n\r\n// compute_singular_vectors()\r\n\r\n//   // Create reset button\r\n//   button = createButton('Reset')\r\n//   button.position(0, height-20)\r\n//   button.mousePressed(reset)\r\n//   button.style('background-color', 'black')\r\n//   button.style('color', '#bbbbbb')\r\n//   button.style('border', 'none')\r\n// }\r\n\r\n// function draw1() {\r\n//   background(\"black\")\r\n//   fill(\"#bbbbbb\")\r\n//   // if (clicked.length < 2)\r\n//   //   text(\"Select two eigenvectors\", 20, 30)\r\n//   // if (clicked.length == 2) {\r\n//   //   text(\"Drag 'em around\", 20, 30)\r\n//   //   update_matrix()\r\n//   // }\r\n\r\n//   for (let i = 0; i < 2; i++) {\r\n//     sx = svd.U.data[i][0] * svd.s[i] * norm + cx\r\n//     sy = -svd.U.data[i][1] * svd.s[i] * norm * det + cy\r\n//     d = 10; fill(blue_orange[i]); noStroke()\r\n//     ellipse(sx, sy, d)\r\n//     stroke(blue_orange[i])\r\n//     line(sx, sy, 2 * cx - sx, 2 * cy - sy)\r\n//   }\r\n\r\n//   for (let n = 0; n < N; n++) {\r\n//     // Update u vectors\r\n//     U[n] = mult(V[n])\r\n\r\n//     // Move u and v to the centre\r\n//     ux = U[n][0] + cx\r\n//     uy = U[n][1] + cy\r\n//     vx = V[n][0] + cx\r\n//     vy = V[n][1] + cy\r\n\r\n//     // Draw the input points in grey\r\n//     // Draw i and j in R and G\r\n//     fill('grey')\r\n//     switch (n) {\r\n//       case bases[0]: fill(red);   break\r\n//       case bases[1]: fill(green); break\r\n//     }\r\n//     d = 5\r\n//     noStroke()\r\n//     ellipse(vx, vy, d)\r\n\r\n//     // Set output points in white\r\n//     fill('white')\r\n\r\n//     // Highlight cicles under the mouse\r\n//     // if (dist(mouseX, mouseY, ux, uy) <= 5 && clicked.length < 2)\r\n//     //   d = 15;\r\n\r\n//     // Draw lines through the e'vectors, set colour and size\r\n//     for (let i = 0; i < clicked.length; i++)\r\n//       if (clicked[i] == n) {\r\n//         stroke(\"grey\")\r\n//         line(\r\n//           cx - V[n][0] * 10, cy - V[n][1] * 10,\r\n//           cx + V[n][0] * 10, cy + V[n][1] * 10\r\n//         )\r\n//         d = 10\r\n//         fill(181,223,108)\r\n//       }\r\n\r\n//     // Draw i and j in R and G\r\n//     switch (n) {\r\n//       case bases[0]: d = 10; fill(red);   break\r\n//       case bases[1]: d = 10; fill(green); break\r\n//     }\r\n\r\n\r\n//     // Draw output points\r\n//     ellipse(ux, uy, d)\r\n//   }\r\n// }\r\n\r\n\r\n// function mult(v) {\r\n//   let ux, uy\r\n//   ux = A[0][0] * v[0] + A[0][1] * v[1]\r\n//   uy = A[1][0] * v[0] + A[1][1] * v[1]\r\n//   return [ux, uy]\r\n// }\r\n\r\n// function mousePressed() {\r\n\r\n//   // Selecting e'vectors\r\n//   // if (clicked.length < 2)\r\n//   //   for (let n = 0; n < N; n++) {\r\n//   //     vx = V[n][0] + cx\r\n//   //     vy = V[n][1] + cy\r\n//   //     if (dist(mouseX, mouseY, vx, vy) <= 5 && !clicked.includes(n))\r\n//   //       clicked.push(n);\r\n//   //   }\r\n\r\n//   // Holding on e'vector\r\n//   if (clicked.length == 2)\r\n//     for (let i = 0; i < 2; i++) {\r\n//       ux = U[clicked[i]][0] + cx\r\n//       uy = U[clicked[i]][1] + cy\r\n//       if (dist(mouseX, mouseY, ux, uy) <= 5)\r\n//         locked[i] = true;\r\n//     }\r\n\r\n//   // Holding on bases vectors\r\n//   for (let i = 0; i < 2; i++) {\r\n//     ux = U[bases[i]][0] + cx\r\n//     uy = U[bases[i]][1] + cy\r\n//     if (dist(mouseX, mouseY, ux, uy) <= 5)\r\n//       locked[i] = true;\r\n//   }\r\n\r\n// }\r\n\r\n// function mouseReleased() {\r\n//   for (let i = 0; i < 6; i++)\r\n//     locked[i] = false;\r\n\r\n// }\r\n\r\n// function mouseDragged() {\r\n//   // for (let i = 0; i < 2; i++)  // Check both e'vectors\r\n//   //   if (locked[i]) {           // If I'm clicking on it\r\n//   //   //   V[clicked[i]][0] = mouseX - cx\r\n//   //   //   V[clicked[i]][1] = mouseY - cy\r\n//   //     // d = dist(mouseX, mouseY, cx, cy) / 50\r\n//   //     d = ((mouseX - cx) * V[clicked[i]][0] + \r\n//   //         (mouseY - cy) * V[clicked[i]][1]) / norm ** 2\r\n//   //     e_values[i] = d\r\n//   //     // A[i][i] = d\r\n//   //   }\r\n//   for (let i = 0; i < 2; i++)\r\n//     if (locked[i]) {\r\n//       A[0][i] = (mouseX - cx) / norm * (-1)**i\r\n//       A[1][i] = (mouseY - cy) / norm * (-1)**i\r\n//       compute_singular_vectors()\r\n//     }\r\n// }\r\n\r\nfunction compute_singular_vectors() {\r\n    const svd = new Matrix.SVD(A)\r\n    let S = Matrix.Matrix.diag(svd.s)\r\n    let R = svd.U.mmul(Matrix.diag(svd.s)).mmul(svd.V.transpose())\r\n    const r = R.to1DArray().map(u => u.toFixed(2)).toString()\r\n    const a = A.toString()\r\n    // Fucking determinant!\r\n    const det = Matrix.determinant(svd.U)\r\n    // console.log(det.toFixed(2))\r\n}\r\n\r\n// function update_matrix(){\r\n//   let u1, u2, v1, v2, l1, l2\r\n//   u1 = V[clicked[0]][0]\r\n//   u2 = V[clicked[0]][1]\r\n//   v1 = V[clicked[1]][0]\r\n//   v2 = V[clicked[1]][1]\r\n//   l1 = e_values[0]\r\n//   l2 = e_values[1]\r\n\r\n//   let d = u1*v2 - u2*v1\r\n//   A[0][0] = (v2*l1*u1 - u2*l2*v1) / d\r\n//   A[0][1] = (u1*l2*v1 - v1*l1*u1) / d\r\n//   A[1][0] = (v2*l1*u2 - u2*l2*v2) / d\r\n//   A[1][1] = (u1*l2*v2 - v1*l1*u2) / d\r\n// }\r\n\r\n// function reset() {\r\n//   A[0] = [1, 0]\r\n//   A[1] = [0, 1]\r\n//   clicked = []\r\n//   e_values = [1, 1]\r\n//   locked = [false, false]\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default draw","import logo from './logo.svg';\nimport './App.css';\nimport Canvas from './component/canvas'\n\nimport { Matrix } from 'ml-matrix';\n\n\n\n\nimport draw from './draw/draw.js'\n\n\n// const matrix = Matrix.ones(5, 5);\n\n// console.log(matrix.data[0][0])\n\nfunction App() {\n\n\n\n  return <Canvas draw={draw} />\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}